{"version":3,"sources":["webpack:///./data/colors.js","webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./data/users.js","webpack:///./js/task-03.js"],"names":["refs","body","document","querySelector","startBtn","stopBtn","intervalId","randomColor","min","max","style","backgroundColor","colors","length","Math","floor","random","startChangeColor","setInterval","removeEventListener","addEventListener","clearInterval","ms","Promise","resolve","setTimeout","then","time","console","log","allUsers","userName","name","active","map","user","updatedUsers","table","makeTransaction","transaction","id","reject","logSuccess","logError","warn","amount","catch","CountdownTimer","selector","targetDate","this","start","setCountdownTimer","clear","getCountdownTimer","updateCountdownTimer","currentTime","Date","now","deltaTime","pad","value","String","padStart","days","hours","mins","secs","textContent"],"mappings":"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","file":"main.1b3cba4c35eb824a823a.js","sourcesContent":["export default [\n  \"#FFFFFF\",\n  \"#2196F3\",\n  \"#4CAF50\",\n  \"#FF9800\",\n  \"#009688\",\n  \"#795548\",\n];\n","import colors from \"../data/colors.js\";\n\nconst refs = {\n  body: document.querySelector(\"body\"),\n  startBtn: document.querySelector('button[data-action=\"start\"]'),\n  stopBtn: document.querySelector('button[data-action=\"stop\"]'),\n};\n\nlet intervalId = null;\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomColor = () => {\n  refs.body.style.backgroundColor =\n    colors[randomIntegerFromInterval(0, colors.length)];\n};\n\nconst startChangeColor = () => {\n  intervalId = setInterval(randomColor, 1000);\n  refs.startBtn.removeEventListener(\"click\", startChangeColor);\n};\n\nconst stopChangeColor = () => {\n  clearInterval(intervalId);\n  refs.startBtn.addEventListener(\"click\", startChangeColor);\n};\n\nrefs.startBtn.addEventListener(\"click\", startChangeColor);\nrefs.stopBtn.addEventListener(\"click\", stopChangeColor);\n","import users from \"../data/users.js\";\n\n\nconst delay = (ms) => {\n  const promise = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n\n  return promise;\n};\n\nconst logger = (time) => console.log(`Resolved after ${time} ms`);\n\n\ndelay(1500).then(logger); \n\n\nconst toggleUserState = (allUsers, userName) => {\n  const promise = new Promise((resolve) => {\n    const updatedUsers = allUsers.map((user) =>\n      user.name === userName ? { ...user, active: !user.active } : user\n    );\n    resolve(updatedUsers);\n  });\n\n  return promise;\n};\n\nconst secondLogger = (updatedUsers) => console.table(updatedUsers);\n\n\ntoggleUserState(users, \"Lux\").then(secondLogger);\n\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const id = transaction.id;\n  const time = randomIntegerFromInterval(200, 500);\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      canProcess ? resolve({ id, time }) : reject(id);\n    }, time);\n  });\n\n  return promise;\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","export default [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: false },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: false },\n];\n","class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = document.querySelector(`${selector}`);\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.start();\n  }\n\n\n  start() {\n    this.setCountdownTimer();\n    this.intervalId = setInterval(() => {\n      this.setCountdownTimer();\n    }, 1000);\n  }\n\n  clear() {\n    const time = this.getCountdownTimer(0);\n    this.updateCountdownTimer(time);\n  }\n\n  setCountdownTimer() {\n    const currentTime = Date.now();\n    const deltaTime = this.targetDate - currentTime;\n    const time = this.getCountdownTimer(deltaTime);\n    this.updateCountdownTimer(time);\n\n    if (deltaTime < 0) {\n      clearInterval(this.intervalId);\n      this.clear();\n      return;\n    }\n  }\n\n\n  pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n\n  getCountdownTimer(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  updateCountdownTimer({ days, hours, mins, secs }) {\n    this.selector.querySelector('[data-value=\"days\"]').textContent = days;\n    this.selector.querySelector('[data-value=\"hours\"]').textContent = hours;\n    this.selector.querySelector('[data-value=\"mins\"]').textContent = mins;\n    this.selector.querySelector('[data-value=\"secs\"]').textContent = secs;\n  }\n}\n\n\nconst firstCountdownTimer = new CountdownTimer({\n  selector: \"#timer-1\",\n  targetDate: new Date(\"Dec 31, 2020\"),\n});\n\nconst secondCountdownTimer = new CountdownTimer({\n  selector: \"#timer-2\",\n  targetDate: new Date(\"Dec 12, 2020 12:45 PM\"),\n});\n"],"sourceRoot":""}